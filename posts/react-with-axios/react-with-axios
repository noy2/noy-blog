---
title: React에서 서버와 통신하기 (axios)
date: 2022-10-31
description: axios를 이용해 서버와 통신해보자
tags: ["React", "axios"]
---

axios를 사용해보기 전에 몇가지 알아보고 사용해보려고 한다.

- 왜 axios 를 사용하는가
  - axios 말고 react 에서 사용할 라이브러리가 있는가
    - AJAX
    - fetch

## 왜 axios 를 사용하는가

axios는 Node.js와 브라우저를 위한 Promise API를 활용하는 HTTP 통신 라이브러리라고 한다. 비동기로 HTTP 통신을 할 수 있으며 return을 promise 객체로 해주기 때문에 response 데이터를 다루기 쉽다.

- 많은 사람들이 사용하는 라이브러리인 만큼 찾아볼 자료가 많기 때문에
- response 데이터를 쉽게 다룰수 있기 때문에

위의 이유들로 axios를 이용해 서버와 통신해보려 한다. ~~다음에는 fetch도 써봐야지~~

### 다른 라이브러리는 있나?

- AJAX (Asynchronous JavaScript And XML)
  - AJAX는 자바스크립트의 라이브러리중 하나이다. `XMLHttpRequest` 객체를 사용하여 자바스크립트를 이용한 비동기 통신을 가능하게 해준다. 더 자세한 내용은 [MDN](https://developer.mozilla.org/ko/docs/Web/Guide/AJAX/Getting_Started)에서 볼 수 있다.
- fetch
  - ES6부터 들어온 자바스크립트 내장 라이브러리이다. Promise 기반으로 만들어졌기 때문에 axios와 마찬가지로 데이터를 다루기 쉽고 내장 라이브러리이기 때문에 상당히 편하다고 한다.
  - 그치만 지원하지 않는 브라우저가 있고 네트워크 에러 발생시에 response timeout이 없어서 기다려야 한다. 또한 JSON으로 변환해주는 과정이 필요하다고 한다.

## axios를 써보자

### 설치하기

- npm

```jsx
npm install axios
```

- yarn

```jsx
yarn add axios
```

## HTTP Methods

## GET

GET은 서버에서 어떤 데이터를 가져온다. GET으로 정보를 전달할때에는 쿼리스트링을 활용해서 전달한다. GET Method는 값이나 상태등을 바꿀 수 없다.

### 문법

```jsx
axios.get(url, [, config]);
```

### 예제

```jsx
import axios from "axios";

axios
  .get(url)
  .then((res) => {
    console.log(res.data);
  })
  .catch((err) => {
    console.log(err);
  });
```

```json
[
  { "id": 1, "name": "Leanne Graham" },
  { "id": 2, "name": "Ervin Howell" },
  { "id": 3, "name": "Shanna" }
]
```

## POST

새로운 리소스를 생성할때 사용한다. 로그인, 회원가입과 같은 사용자의 정보들을 서버에 업로드할 때 사용한다. POST를 사용하면 주소창에 쿼리스트링이 남지 않기 때문에 GET보다 안전하다.

### 문법

```jsx
axios.post(url,{
  {data}
    },[,config])
```

### 예제

```jsx
axios
  .post(url, {
    firstName: "Fred",
    lastName: "Flintstone",
  })
  .then((res) => console.log(res))
  .catch((err) => console.log(err));
```

data 객체에 header를 추가할 수 있다.

```jsx
axios
  .post(
    url,
    {
      firstName: "Fred",
      lastName: "Flintstone",
    },
    {
      headers: {
        "Content-type": "application/json",
        Accept: "application/json",
      },
    }
  )
  .then((res) => console.log(res))
  .catch((err) => console.log(err));
```

## DELETE

REST 기반 API에서 데이터베이스에 저장되어 있는 데이터를 삭제하는 목적으로 사용한다. DELETE Method는 HTML Form 태그에서 지원하는 HTTP 메소드가 아니다. 이 메소드는 데이터베이스에 있는 내용을 삭제하는 것을 목적으로 하기 때문에 두번째 인자는 전달하지 않는다.

### 문법

```jsx
axios.delete(url, [, config]);
```

### 예제

```jsx
axios
  .delete(url)
  .then((response) => console.log(response))
  .catch((err) => {
    throw new Error(err);
  });
```

## PUT

REST 기반 API에서 데이터베이스에 있는 데이터를 갱신하는 목적으로 사용된다. 이 메소드는 HTML Form 태그에서 기본적으로 지원하는 HTTP 메소드가 아니다.

### 문법

```jsx
axios.put(url[, data[, config]])
```

### 예제

```jsx
axios
  .PUT(url, {
    firstName: "Fred",
    lastName: "Flintstone",
  })
  .then((res) => console.log(res))
  .catch((err) => console.log(err));
```

## 이외

이외에도 axios는 다양한 메소드를 지원한다고 한다.

```jsx
axios.request(config)

axios.head(url[, config])

axios.options(url[, config])

axios.patch(url[, data[, config]])
```
